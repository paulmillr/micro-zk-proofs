import { hexToBytes } from '@noble/curves/utils.js';
import { bn254 } from '@noble/curves/bn254.js';
import { keccakprg } from '@noble/hashes/sha3-addons.js';
import { describe, should } from '@paulmillr/jsbt/test.js';
import { deepStrictEqual } from 'node:assert';
import { readFileSync } from 'node:fs';
import { dirname, join as joinPath } from 'node:path';
import { fileURLToPath } from 'node:url';
import * as zkp from '../index.js';
import * as witness from '../witness.js';
import sumConstraints from './vectors/sum_test_constraints.json' with { type: 'json' };
import { utf8ToBytes } from '@noble/hashes/utils.js';
const DATA_1 =
  '01000000000000000000000000000000000000000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000210000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';

const DATA_2 =
  '77746e73020000000200000001000000280000000000000020000000010000f093f5e1439170b97948e833285d588181b64550b829a031e1724e64306500000002000000a00c

const _dirname = dirname(fileURLToPath(import.meta.url));

const prg = (seed) => {
  const p = keccakprg();
  p.addEntropy(utf8ToBytes(seed));
  const randomBytes = (len) => p.randomBytes(len);
  return randomBytes;
};

//const groth16 = zkp.buildSnark(bn254, { unsafePreserveToxic: true }).groth;

describe('Witness', () => {
  should('R1CS', () => {
    const data = Uint8Array.from(readFileSync(joinPath(_dirname, './vectors/sum_test.r1cs')));
    const coder = witness.getCoders(bn254).R1CS; // We need to pass fields because it depends on bytesize of order
    const decoded = coder.decode(data);
    deepStrictEqual(decoded.version, 1);
    deepStrictEqual(decoded.sections[1], {
      TAG: 'header',
      data: {
        prime: bn254.fields.Fr.ORDER,
        nWires: 101,
        nPubOut: 1,
        nPubIn: 0,
        nPrvIn: 2,
        nLables: 200n,
        mConstraints: 101, // == nSignals? nVars?
      },
    });

    /*

       "nPrvInputs": 1,
    "nPubInputs": 1,
    "nInputs": 2,
    "nOutputs": 1,
    "nVars": 101,
    "nConstants": 0,
    "nSignals": 101
    */
    deepStrictEqual(decoded.sections[0].data, zkp.stringBigints.decode(sumConstraints).constraints);
  });
  should('binary witness', () => {
    const data = hexToBytes(DATA_1);

    const coder = witness.getCoders(bn254).binWitness;
    const decoded =
      '1,67,33,34,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0';
    deepStrictEqual(
      coder.decode(data),
      decoded.split(',').map((n) => BigInt(n))
    );
  });
  should('WTNS', () => {
    const data = hexToBytes(DATA_2);
    const decoded2 =
      '1,67,33,34,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0';
    const coder = witness.getCoders(bn254).WTNS;
    deepStrictEqual(coder.decode(data), {
      magic: undefined,
      version: 2,
      sections: [
        {
          TAG: 'header',
          data: {
            prime: bn254.fields.Fr.ORDER,
            size: 101, // winess size
          },
        },
        {
          TAG: 'witness',
          data: decoded2.split(',').map((n) => BigInt(n)),
        },
      ],
    });
  });
  should('ZKey', () => {
    // NOTE: keys extracted from deterministic tests in snarkjs v0.7.5 (fullproccess.js)
    const data = Uint8Array.from(readFileSync(joinPath(_dirname, './vectors/keys/zkey0.zkey')));
    // json exported via 'snarkjs zkey export json' to verify we are parsing correctly
    const json = zkp.stringBigints.decode(
      JSON.parse(readFileSync(joinPath(_dirname, './vectors/keys/zkey0.json'), 'utf8'))
    );
    const coder = witness.getCoders(bn254).ZKeyRaw;
    const decoded = coder.decode(data);
    deepStrictEqual(json.protocol, decoded.sections[0].data);
    // power = log2(domainSize)
    for (const k of ['q', 'r', 'n8q', 'n8r', 'nPublic', 'nVars', 'domainSize']) {
      deepStrictEqual(decoded.sections[1].data[k], json[k]);
    }
    const { Fr, Fp } = bn254.fields;
    const fieldFromMont = (f, is1) => {
      const Rr = f.pow(BigInt(2), BigInt(f.BYTES * 8));
      const RRi = f.inv(Rr);
      const RRi2 = f.mul(RRi, RRi);
      return (x) => f.mul(x, is1 ? RRi : RRi2);
    };
    const convFr2 = fieldFromMont(Fr, false);
    const convFp = fieldFromMont(Fp, true);
    const convG1 = ([x, y]) =>
      x == 0 && y == 0 ? [BigInt(0), BigInt(1), BigInt(0)] : [convFp(x), convFp(y), BigInt(1)];

    //     [ [ 0n, 0n ], [ 0n, 0n ], [ 1n, 0n ] ], ->     [ [ 0n, 0n ], [ 1n, 0n ], [ 0n, 0n ] ],
    const convG2 = ([xc0, xc1, yc0, yc1]) =>
      xc0 == 0 && xc1 == 0 && yc0 == 0 && yc1 == 0
        ? [
            [BigInt(0), BigInt(0)],
            [BigInt(1), BigInt(0)],
            [BigInt(0), BigInt(0)],
          ]
        : [
            [convFp(xc0), convFp(xc1)],
            [convFp(yc0), convFp(yc1)],
            [BigInt(1), BigInt(0)],
          ];

    deepStrictEqual(json.q, bn254.fields.Fp.ORDER);
    deepStrictEqual(json.r, bn254.fields.Fr.ORDER);

    deepStrictEqual(convG1(decoded.sections[1].data.vk_alpha_1), json.vk_alpha_1);
    deepStrictEqual(convG1(decoded.sections[1].data.vk_beta_1), json.vk_beta_1);
    deepStrictEqual(convG1(decoded.sections[1].data.vk_delta_1), json.vk_delta_1);
    deepStrictEqual(convG2(decoded.sections[1].data.vk_beta_2), json.vk_beta_2);
    deepStrictEqual(convG2(decoded.sections[1].data.vk_delta_2), json.vk_delta_2);
    // coefficients
    deepStrictEqual(
      decoded.sections[2].data.map((i) => ({ ...i, value: convFr2(i.value) })),
      json.ccoefs
    );
    deepStrictEqual(decoded.sections[6].data.map(convG1), json.A);
    deepStrictEqual(decoded.sections[7].data.map(convG1), json.B1);
    deepStrictEqual(
      new Array(json.nPublic + 1).fill(null).concat(decoded.sections[5].data.map(convG1)),
      json.C
    );
    deepStrictEqual(decoded.sections[8].data.map(convG2), json.B2);
    deepStrictEqual(decoded.sections[4].data.map(convG1), json.hExps);
    deepStrictEqual(decoded.sections[3].data.map(convG1), json.IC);

    const parsed = witness.getCoders(bn254).parseZKey(data);
    deepStrictEqual(parsed.json, json);
  });

  should('ZKey process', async () => {
    const groth16 = zkp.buildSnark(bn254, { unsafePreserveToxic: true }).groth;
    const { parseZKey, WTNS, ZKeyRaw, ZKeyRaw2 } = witness.getCoders(bn254);
    const data = Uint8Array.from(
      readFileSync(joinPath(_dirname, './vectors/keys/zkey_final.zkey'))
    );
    const { pkey, vkey } = parseZKey(data);
    const vkeySnark = zkp.stringBigints.decode(
      JSON.parse(readFileSync(joinPath(_dirname, './vectors/keys/zkey_final.vkey.json'), 'utf8'))
    );
    // New format slightly changed
    const vkeySnarkFix = { ...vkeySnark };
    delete vkeySnarkFix.curve;
    delete vkeySnarkFix.vk_alphabeta_12;
    vkeySnarkFix.protocol = 'groth';
    vkeySnarkFix.vk_alfa_1 = vkeySnarkFix.vk_alpha_1;
    delete vkeySnarkFix.vk_alpha_1;

    deepStrictEqual(vkey, vkeySnarkFix);

    const witnessBytes = Uint8Array.from(
      readFileSync(joinPath(_dirname, './vectors/keys/witness.wtns'))
    );
    const wtns = WTNS.decode(witnessBytes);
    const witnessData = wtns.sections.find((i) => i.TAG === 'witness');
    if (!witnessData) throw new Error('WTNS: cannot find witness');

    const proof = await groth16.createProof(pkey, witnessData.data, prg('h stuff'));
    // this tested against snarkjs:
    // npx snarkjs zkey export verificationkey ../../test/vectors/keys/zkey_final.zkey ../../test/vectors/keys/zkey_final.vkey.json
    // npx snarkjs groth16 verify ../../test/vectors/keys/zkey_final.vkey.json ../../test/vectors/keys/public.json ../../test/vectors/keys/proof.json
    // [INFO]  snarkJS: OK!
    deepStrictEqual(zkp.stringBigints.encode(proof), {
      proof: JSON.parse(readFileSync(joinPath(_dirname, './vectors/keys/proof.json'), 'utf8')),
      publicSignals: JSON.parse(
        readFileSync(joinPath(_dirname, './vectors/keys/public.json'), 'utf8')
      ),
    });
    console.log('PROOF', JSON.stringify(zkp.stringBigints.encode(proof)));
    deepStrictEqual(groth16.verifyProof(vkey, proof), true);
  });
});

should.runWhen(import.meta.url);
